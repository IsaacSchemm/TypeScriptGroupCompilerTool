Imports System.IO
Imports System.Text
Imports System.Web
Imports System.Web.Script.Serialization
Imports RunProcessAsTask

Public Class CompilationGroup
    Private Shared Serializer As New JavaScriptSerializer

    Public ReadOnly Property Name As String

    Private ReadOnly Paths As HashSet(Of String)
    Private ReadOnly Dependencies As HashSet(Of CompilationGroup)

    Private CompilationTask As Task

    Public Sub New(Name As String)
        Me.Name = Name
        Me.Paths = New HashSet(Of String)
        Me.Dependencies = New HashSet(Of CompilationGroup)
    End Sub

    Public Sub Add(FilePath As String)
        Paths.Add(FilePath)
    End Sub

    Public Sub Add(Group As CompilationGroup)
        If Group.Dependencies.Contains(Me) Then
            Throw New Exception($"Circular dependency detected: {Me} is already a dependency of {Group}")
        End If
        Dependencies.Add(Group)
        For Each Dependency In Group.Dependencies
            Dependencies.Add(Dependency)
        Next
    End Sub

    Public Function Compile() As Task(Of IEnumerable(Of String))
        SyncLock Me
            If CompilationTask Is Nothing Then
                CompilationTask = Me.CompileInternal()
            End If
            Return CompilationTask
        End SyncLock
    End Function

    Private Shared Function GetCommonParent(Paths As IEnumerable(Of String))
        Dim AbsoluteInputPaths = Paths.Select(Function(s) Path.GetFullPath(s))
        Dim ShortestInputPath = AbsoluteInputPaths.OrderBy(Function(s) s.Length).First()
        Dim Index = 0
        While Index < ShortestInputPath.Length
            If AbsoluteInputPaths.Select(Function(s) s(Index)).Distinct().Count() > 1 Then
                Return ShortestInputPath.Substring(0, Index)
            End If
            Index += 1
        End While
        Return ShortestInputPath
    End Function

    Private Async Function CompileInternal() As Task(Of IEnumerable(Of String))
        ' Get *.d.ts files generated by dependencies
        Dim CompilationTasks As New List(Of Task(Of IEnumerable(Of String)))
        For Each Group In Dependencies
            CompilationTasks.Add(Group.Compile())
        Next
        Dim DefinitionFiles As New List(Of String)
        For Each Task In CompilationTasks
            DefinitionFiles.AddRange(Await Task)
        Next

        If Paths.Any Then
            ' Find the root path of the scripts that are listed
            Dim CommonParentPath = GetCommonParent(Paths)
            If CommonParentPath = "" Then
                Throw New Exception("No common path for files: " & String.Join(", ", Paths))
            End If

            ' See if there is a tsconfig.json in the current directory
            Dim BaseConfig = Path.GetFullPath("tsconfig.json")
            If Not File.Exists(BaseConfig) Then
                BaseConfig = Nothing
            End If

            ' Write a new tsconfig.json
            Dim ProjectPath = Path.Combine(Path.GetTempPath(), "TSC-CustomCompilationGroupTool-" & Guid.NewGuid().ToString())
            Directory.CreateDirectory(ProjectPath)
            Dim ConfigurationFile = Path.Combine(ProjectPath, "tsconfig.json")
            File.WriteAllText(ConfigurationFile, Serializer.Serialize(New With {
                .extends = BaseConfig,
                .compilerOptions = New With {
                    .outDir = ProjectPath,
                    .rootDir = CommonParentPath,
                    .declaration = True},
                .files = Paths.Select(Function(s) Path.GetFullPath(s)).Concat(DefinitionFiles)}))

            ' Run tsc
            Dim Results = Await ProcessEx.RunAsync(New ProcessStartInfo("C:/Program Files (x86)/Microsoft SDKs/TypeScript/2.1/tsc") With {
                .WorkingDirectory = ProjectPath
            })

            ' Print output of tsc to console
            For Each Line In Results.StandardOutput
                Console.WriteLine(Line)
            Next
            For Each Line In Results.StandardError
                Console.Error.WriteLine(Line)
            Next

            If Results.ExitCode <> 0 Then
                Throw New Exception($"The TypeScript compiler was unable to compile {Name} successfully.")
            End If

            ' Move JavaScript and source map files to the correct directories
            MoveCompiledFiles(ProjectPath, CommonParentPath)

            ' Return a list of generated *.d.ts files
            DefinitionFiles.AddRange(Directory.EnumerateFiles(ProjectPath, "*.ts", SearchOption.AllDirectories))
        End If
        Return DefinitionFiles
    End Function

    Private Shared Sub MoveCompiledFiles(FromPath As String, ToPath As String)
        For Each FilePath In Directory.EnumerateFiles(FromPath)
            If FilePath.EndsWith(".js") Or FilePath.EndsWith(".js.map") Then
                Dim DestFilePath = Path.Combine(ToPath, Path.GetFileName(FilePath))
                If File.Exists(DestFilePath) Then
                    File.Delete(DestFilePath)
                End If
                File.Move(FilePath, DestFilePath)
            End If
        Next
        For Each DirectoryPath In Directory.EnumerateDirectories(FromPath)
            MoveCompiledFiles(DirectoryPath, Path.Combine(ToPath, Path.GetFileName(DirectoryPath)))
        Next
    End Sub

    Public Overrides Function ToString() As String
        Return Name
    End Function
End Class
